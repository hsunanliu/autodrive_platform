#!/usr/bin/env python3
"""
切換到實際模式的輔助腳本
"""

import os
import asyncio
import httpx
import json
from getpass import getpass

class RealModeSetup:
    """實際模式設置助手"""
    
    def __init__(self):
        self.iota_node = "https://api.testnet.iota.cafe"
        self.config_file = "backend/app/config.py"
        self.env_file = ".env"
    
    async def check_wallet_balance(self, wallet_address: str) -> dict:
        """檢查錢包餘額"""
        try:
            payload = {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "iota_getBalance",
                "params": [wallet_address]
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.iota_node,
                    json=payload,
                    headers={"Content-Type": "application/json"},
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if "result" in result:
                        balance = int(result["result"])
                        return {
                            "success": True,
                            "balance_micro_iota": balance,
                            "balance_iota": balance / 1_000_000,
                            "sufficient": balance >= 1_000_000  # 至少 1 IOTA
                        }
                    else:
                        return {"success": False, "error": result.get("error", "Unknown error")}
                else:
                    return {"success": False, "error": f"HTTP {response.status_code}"}
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def validate_wallet_address(self, address: str) -> bool:
        """驗證錢包地址格式"""
        return (
            address.startswith("0x") and 
            len(address) == 66 and 
            all(c in "0123456789abcdefABCDEF" for c in address[2:])
        )
    
    def update_config_file(self, mock_mode: bool = False):
        """更新配置文件"""
        try:
            with open(self.config_file, 'r') as f:
                content = f.read()
            
            # 更新 Mock 模式
            if mock_mode:
                content = content.replace(
                    "MOCK_MODE: bool = True",
                    "MOCK_MODE: bool = True"
                ).replace(
                    "MOCK_MODE: bool = False", 
                    "MOCK_MODE: bool = True"
                )
            else:
                content = content.replace(
                    "MOCK_MODE: bool = True",
                    "MOCK_MODE: bool = False"
                )
            
            with open(self.config_file, 'w') as f:
                f.write(content)
            
            return True
        except Exception as e:
            print(f"❌ 更新配置文件失敗: {e}")
            return False
    
    def update_env_file(self, wallet_address: str, private_key: str = None):
        """更新環境變量文件"""
        try:
            # 讀取現有 .env 文件
            env_vars = {}
            if os.path.exists(self.env_file):
                with open(self.env_file, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            env_vars[key] = value
            
            # 更新錢包配置
            env_vars['PLATFORM_WALLET_ADDRESS'] = wallet_address
            if private_key:
                env_vars['PLATFORM_WALLET_PRIVATE_KEY'] = private_key
            env_vars['MOCK_MODE'] = 'false'
            
            # 寫回文件
            with open(self.env_file, 'w') as f:
                f.write("# AutoDrive Platform Environment Variables\n")
                f.write("# Generated by switch_to_real_mode.py\n\n")
                
                for key, value in env_vars.items():
                    f.write(f"{key}={value}\n")
            
            return True
        except Exception as e:
            print(f"❌ 更新環境文件失敗: {e}")
            return False
    
    async def interactive_setup(self):
        """互動式設置"""
        print("🚀 AutoDrive 實際模式設置助手")
        print("=" * 50)
        
        # 1. 獲取錢包地址
        print("\n📝 步驟 1: 錢包配置")
        while True:
            wallet_address = input("請輸入平台錢包地址 (0x...): ").strip()
            
            if not wallet_address:
                print("❌ 錢包地址不能為空")
                continue
            
            if not self.validate_wallet_address(wallet_address):
                print("❌ 錢包地址格式不正確 (應為 0x 開頭的 66 位字符)")
                continue
            
            break
        
        # 2. 檢查錢包餘額
        print(f"\n🔍 步驟 2: 檢查錢包餘額...")
        balance_result = await self.check_wallet_balance(wallet_address)
        
        if not balance_result["success"]:
            print(f"❌ 無法查詢錢包餘額: {balance_result['error']}")
            print("請確認:")
            print("  1. 錢包地址正確")
            print("  2. 網絡連接正常")
            print("  3. 錢包已在 IOTA 測試網上激活")
            return False
        
        balance_iota = balance_result["balance_iota"]
        print(f"💰 錢包餘額: {balance_iota:.6f} IOTA")
        
        if not balance_result["sufficient"]:
            print("⚠️  錢包餘額不足 (建議至少 1 IOTA)")
            print("請訪問 IOTA 測試網水龍頭獲取測試幣:")
            print("  https://faucet.testnet.iota.org/")
            
            continue_anyway = input("是否繼續設置? (y/N): ").strip().lower()
            if continue_anyway != 'y':
                return False
        
        # 3. 私鑰配置 (可選)
        print(f"\n🔐 步驟 3: 私鑰配置 (可選)")
        print("注意: 私鑰將用於自動簽署交易")
        print("如果不提供，需要手動簽署每筆交易")
        
        include_private_key = input("是否包含私鑰配置? (y/N): ").strip().lower()
        private_key = None
        
        if include_private_key == 'y':
            while True:
                private_key = getpass("請輸入私鑰 (輸入時不會顯示): ").strip()
                
                if not private_key:
                    print("❌ 私鑰不能為空")
                    continue
                
                if len(private_key) < 32:
                    print("❌ 私鑰長度不正確")
                    continue
                
                break
        
        # 4. 確認配置
        print(f"\n📋 步驟 4: 確認配置")
        print(f"錢包地址: {wallet_address}")
        print(f"錢包餘額: {balance_iota:.6f} IOTA")
        print(f"包含私鑰: {'是' if private_key else '否'}")
        print(f"模式切換: Mock → 實際")
        
        confirm = input("\n確認應用這些設置? (y/N): ").strip().lower()
        if confirm != 'y':
            print("❌ 設置已取消")
            return False
        
        # 5. 應用配置
        print(f"\n⚙️ 步驟 5: 應用配置...")
        
        # 更新環境文件
        if not self.update_env_file(wallet_address, private_key):
            return False
        print("✅ 環境變量已更新")
        
        # 更新配置文件
        if not self.update_config_file(mock_mode=False):
            return False
        print("✅ 配置文件已更新")
        
        # 6. 完成提示
        print(f"\n🎉 設置完成!")
        print("=" * 50)
        print("下一步:")
        print("  1. 重啟後端服務: docker-compose restart backend")
        print("  2. 運行檢查: python check_interaction.py")
        print("  3. 測試用戶註冊 (會產生真實交易)")
        print("  4. 監控日誌: docker-compose logs -f backend")
        
        print(f"\n⚠️  重要提醒:")
        print("  • 現在每次操作都會消耗真實的 Gas 費用")
        print("  • 請監控錢包餘額，及時補充測試幣")
        print("  • 如需切回 Mock 模式，運行: python switch_to_real_mode.py --mock")
        
        return True
    
    def switch_to_mock(self):
        """切換回 Mock 模式"""
        print("🔄 切換回 Mock 模式...")
        
        if self.update_config_file(mock_mode=True):
            print("✅ 已切換回 Mock 模式")
            print("重啟服務: docker-compose restart backend")
            return True
        else:
            return False

async def main():
    """主函數"""
    import sys
    
    setup = RealModeSetup()
    
    if len(sys.argv) > 1 and sys.argv[1] == "--mock":
        setup.switch_to_mock()
    else:
        await setup.interactive_setup()

if __name__ == "__main__":
    asyncio.run(main())